import os
import fnmatch
import multiprocessing
from multiprocessing import cpu_count

buildmode = ARGUMENTS.get('mode', 'debug')   #holds current mode

cpus = multiprocessing.cpu_count() - 1
if not cpus:
    cpus = 1

SetOption('num_jobs', cpus)
print "running with -j", GetOption('num_jobs')

#check if the user has been naughty: only 'debug' or 'release' allowed
if not (buildmode in ['debug', 'release', 'coverage']):
   print "Error: expected 'debug', 'coverage' or 'release', found: " + mymode
   Exit(1)

#tell the user what we're doing
print '**** Compiling in ' + buildmode + ' mode...'

#add a --prefix option
AddOption('--prefix',
                  dest='prefix',
                  type='string',
                  nargs=1,
                  action='store',
                  metavar='DIR',
                  default='/usr/local',
                  help='installation prefix')

AddOption('--boost-dir',
                  dest='boost_dir',
                  type='string',
                  nargs=1,
                  action='store',
                  help='location of custom boost library')

# add a option to see what happens if deprecated methods are taken out
AddOption('--disable-deprecated',
                  action='store_true',
                  default=False,
                  dest="deprecated",
                  help='disable deprecated APIs')

debugcompilerflags = ['-ggdb3']   #extra compile flags for debug
coveragecompilerflags = debugcompilerflags + ['-O0' ,'--coverage'] 
releasecompilerflags = ['-O3', '-DNDEBUG']  #extra compile flags for release

linklibraries =  [ "tpie",
   "boost_program_options",
   "boost_iostreams",
   "boost_filesystem",
   "boost_system",
   "boost_regex",
   "boost_thread",
   "z",
   "snappy",
   "pthread"
   ]

if buildmode == 'coverage':
    linklibraries.append('gcov')

env = Environment()
env["CC"] = os.getenv("CC") or env["CC"]
env["CXX"] = os.getenv("CXX") or env["CXX"]

install_prefix = GetOption('prefix')
custom_boost = GetOption('boost_dir')

launch_dir = env.GetLaunchDir()
env.Append(CPPFLAGS = ['-std=c++11', '-msse4.2'])
env.Append(CPPPATH=[launch_dir + '/3rdparty/rapidjson/include',
                    launch_dir + '/3rdparty/msgpack-c/include',
                    launch_dir + '/3rdparty/utf8',
                    launch_dir + '/3rdparty/misc',
                    launch_dir + '/3rdparty/tpie/build/install/include',
                    launch_dir + '/3rdparty/xchange/src'
                    ])

# disable deprecated methods
if GetOption('deprecated'):
    env.Append(CPPFLAGS = ['-DKEYVI_DEPRECATED'])

# Mac buid
if env['PLATFORM'] == 'darwin':
    env.Append(CPPDEFINES=['OS_MACOSX'])
    env.Append(LIBPATH=['/usr/local/lib']) 
    env.Append(CPPPATH=['/usr/local/include'])
    linklibraries.remove('boost_thread')
    linklibraries.append('boost_thread-mt')
    
#append the user's additional compile flags
if buildmode == 'debug':
   env.Append(CPPFLAGS=debugcompilerflags)
elif buildmode == 'coverage':
   env.Append(CPPFLAGS=coveragecompilerflags)
else:
   env.Append(CPPFLAGS=releasecompilerflags)

#make sure the sconscripts can get to the variables
Export('env', 'buildmode', 'debugcompilerflags', 'releasecompilerflags', 'coveragecompilerflags', 'linklibraries', 'install_prefix')

#put all .sconsign files in one place
env.SConsignFile()
    
#build tpie dependency

tpie_build_cmd = "cd 3rdparty/tpie && mkdir -p build && cd build &&"

if custom_boost:
    tpie_build_cmd += " export BOOST_ROOT={} &&".format(custom_boost)

tpie_build_cmd += " CXX=" + env["CXX"] + " cmake -D COMPILE_TEST=OFF"
tpie_build_cmd += " -D CMAKE_BUILD_TYPE:STRING=Release -D CMAKE_INSTALL_PREFIX=install -D TPIE_PARALLEL_SORT=1 -D CMAKE_CXX_FLAGS=\"-fPIC -std=c++11\" .. && "
tpie_build_cmd += "make -j " + str(GetOption('num_jobs')) + " && make install"


tpie = env.Command(["3rdparty/tpie/build/install/lib/libtpie.a","3rdparty/tpie/build/install/include/tpie/tpie.h"], "", tpie_build_cmd)

env.Append(LIBPATH=[launch_dir + '/3rdparty/tpie/build/install/lib'])
env.Clean(tpie, '3rdparty/tpie/build')

#specify the sconscript for the compiler
project = 'keyvicompiler'
SConscript('src/cpp/keyvicompiler/SConscript', exports=['project'])

#specify the sconscript for the inspector
project = 'keyviinspector'
SConscript('src/cpp/keyviinspector/SConscript', exports=['project'])

#specify the sconscript for unit tests
project = 'dictionaryfsa_unittests'
SConscript('tests/cpp/SConscript', exports=['project'])

# packaging mode
if 'debian' in COMMAND_LINE_TARGETS:
      SConscript("deb/SConscript")
